
# File Descriptions and Purposes

## Core Application Files

### [src/main.ts](mdc:src/main.ts)
Main process entry point. Initializes the Electron app, creates the menubar using the `menubar` library, sets up all manager instances, handles app lifecycle events, and coordinates between different modules.

### [src/preload.ts](mdc:src/preload.ts)
Secure bridge between main and renderer processes. Exposes safe APIs to the renderer process while maintaining context isolation. Handles IPC communication setup and provides typed interfaces for renderer-main communication.

### [src/renderer/App.tsx](mdc:src/renderer/App.tsx)
Main React application component. Manages application state, tab navigation, settings loading, update status monitoring, and provides the overall UI structure with error boundaries.

### [src/renderer/index.tsx](mdc:src/renderer/index.tsx)
React application entry point. Sets up the React DOM root and renders the main App component.

### [src/renderer/index.html](mdc:src/renderer/index.html)
HTML template for the Electron renderer process. Contains the basic HTML structure and root element for React mounting.

### [src/renderer/hooks/useUpdateStatus.ts](mdc:src/renderer/hooks/useUpdateStatus.ts)
Custom React hook for updater state. Subscribes to UpdaterState from the main process via IPC, exposes derived helpers (isChecking, isAvailable, etc.), and provides declarative actions for update checking, downloading, and installation. Designed for use with the new state machine updater flow.

## Manager Classes (Core Logic)

### [src/modules/index.ts](mdc:src/modules/index.ts)
Central export file for all manager modules. Provides a clean import interface for all core functionality managers.

### [src/modules/settingsManager.ts](mdc:src/modules/settingsManager.ts)
Manages application settings persistence. Handles reading/writing JSON settings file, provides default values, offers convenience methods for common operations like window size updates, and ensures settings auto-save.

### [src/modules/shortcutManager.ts](mdc:src/modules/shortcutManager.ts)
Manages global keyboard shortcuts. Handles registration/unregistration of system-wide shortcuts, supports platform-specific key combinations, and provides dynamic shortcut updating.

### [src/modules/contextMenuManager.ts](mdc:src/modules/contextMenuManager.ts)
Manages tray icon context menu. Creates and updates the right-click menu for the menubar icon, handles menu item actions, and supports dynamic menu updates.

### [src/modules/ipcManager.ts](mdc:src/modules/ipcManager.ts)
Handles Inter-Process Communication between main and renderer. Sets up IPC channels, manages message passing, coordinates between different managers, and provides secure communication interface.

### [src/modules/updaterManager.ts](mdc:src/modules/updaterManager.ts)
Manages application auto-updates using electron-updater. Implements a state machine pattern using a discriminated union UpdaterState type. Handles update checking, downloading, installation, and provides update status to the UI via a single IPC channel. All state transitions are explicit, and dialogs are abstracted for testability. Fully decoupled from UI logic.

## React Components

### [src/renderer/components/ErrorBoundary.tsx](mdc:src/renderer/components/ErrorBoundary.tsx)
React error boundary component. Catches and handles React component errors gracefully, provides user-friendly error UI with recovery options, and prevents app crashes from component failures.

### [src/renderer/components/ErrorBoundary.css](mdc:src/renderer/components/ErrorBoundary.css)
Styling for the ErrorBoundary component. Provides clean, theme-aware error display styling.

### [src/renderer/components/Header.tsx](mdc:src/renderer/components/Header.tsx)
Navigation header component. Provides tab switching, minimize button, settings access, and displays current app state.

### [src/renderer/components/Header.css](mdc:src/renderer/components/Header.css)
Styling for the Header component. Handles navigation styling, button states, and responsive layout.

### [src/renderer/components/HelloWorld.tsx](mdc:src/renderer/components/HelloWorld.tsx)
Welcome/home screen component. Displays main application content, welcome message, and primary user interface.

### [src/renderer/components/HelloWorld.css](mdc:src/renderer/components/HelloWorld.css)
Styling for the HelloWorld component. Provides main content area styling and layout.

### [src/renderer/components/Settings.tsx](mdc:src/renderer/components/Settings.tsx)
Settings panel component. Handles all application settings UI, shortcut recording, theme switching, and settings persistence through IPC calls. The Updates section is now a pure function of UpdaterState, showing update status, progress, release notes, and the correct action buttons based on the current updater state. Declarative, robust, and easy to maintain.

### [src/renderer/components/Settings.css](mdc:src/renderer/components/Settings.css)
Styling for the Settings component. Provides settings panel layout, form styling, and theme-aware controls.

### [src/renderer/components/ShortcutRecorder.tsx](mdc:src/renderer/components/ShortcutRecorder.tsx)
Keyboard shortcut recording component. Captures user key combinations, validates shortcuts, and provides visual feedback during recording.

### [src/renderer/components/ShortcutRecorder.css](mdc:src/renderer/components/ShortcutRecorder.css)
Styling for the ShortcutRecorder component. Handles recording state visuals and key combination display.

### [src/renderer/components/Toast.tsx](mdc:src/renderer/components/Toast.tsx)
Individual toast notification component with smooth animations. Replaces manual DOM manipulation with proper React component, supports different types (info, success, error) and auto-dismissal.

### [src/renderer/components/Toast.css](mdc:src/renderer/components/Toast.css)
Styling for Toast components including animations, positioning, and responsive design.

### [src/renderer/components/ToastContainer.tsx](mdc:src/renderer/components/ToastContainer.tsx)
Container component that manages multiple toast notifications. Handles toast lifecycle, maximum toast limits, and provides global toast API for easy usage throughout the app.

### [src/renderer/components/ProgressBar.tsx](mdc:src/renderer/components/ProgressBar.tsx)
Reusable progress bar component with customizable styling, animated stripes, and percentage display. Replaces inline progress bar logic throughout the application.

### [src/renderer/components/ProgressBar.css](mdc:src/renderer/components/ProgressBar.css)
Styling for ProgressBar component including animations, theme variants, and responsive design.

## Shared Code

### [src/shared/constants.ts](mdc:src/shared/constants.ts)
Shared types, interfaces, and constants. Defines TypeScript types used across main and renderer processes, default settings values, and common enums.

## Styling

### [src/renderer/App.css](mdc:src/renderer/App.css)
Global application styles. Contains CSS custom properties for theming, global layout styles, and base component styling.

## Assets

### [src/assets/icons/app-icon.png](mdc:src/assets/icons/app-icon.png)
Main application icon used for the app bundle and system display.

### [src/assets/icons/menubar-icon.png](mdc:src/assets/icons/menubar-icon.png)
Standard resolution menubar tray icon.

### [src/assets/icons/menubar-icon@2x.png](mdc:src/assets/icons/menubar-icon@2x.png)
High resolution (retina) menubar tray icon for crisp display on high-DPI screens.

### [src/assets/entitlements.mac.plist](mdc:src/assets/entitlements.mac.plist)
macOS entitlements file for code signing and security permissions.

## Configuration Files

### [package.json](mdc:package.json)
Project configuration, dependencies, scripts, and Electron Builder settings. Defines build targets, development scripts, and packaging configuration.

### [tsconfig.json](mdc:tsconfig.json)
TypeScript configuration for the renderer process. Sets up module resolution, JSX handling, and compilation options.

### [tsconfig.main.json](mdc:tsconfig.main.json)
TypeScript configuration specifically for the main process compilation.

### [webpack.config.js](mdc:webpack.config.js)
Webpack configuration for bundling the renderer process. Handles TypeScript compilation, CSS loading, and HTML template generation.

### [.eslintrc.js](mdc:.eslintrc.js)
ESLint configuration with TypeScript, React, and Electron-specific rules. Provides code quality enforcement with different rules for main vs renderer processes.

### [.prettierrc.js](mdc:.prettierrc.js)
Prettier configuration for consistent code formatting across the project.

### [.prettierignore](mdc:.prettierignore)
Files and directories to exclude from Prettier formatting.

### [README.md](mdc:README.md)
Project documentation with setup instructions, architecture overview, and usage guidelines.

### [SETUP.md](mdc:SETUP.md)
Detailed setup and development instructions for new contributors.

### [SETUP.md](mdc:SETUP.md)
Detailed setup and development instructions for new contributors.
